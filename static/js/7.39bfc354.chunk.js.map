{"version":3,"sources":["Common/FormsControl.js","redux/selectors.js","utils/validators/validators.js","Common/FormsControl.module.scss","components/Login/login.module.scss","components/Login/loginForm.js","components/Login/login.js","components/Login/LoginContainer.js"],"names":["FormControl","input","meta","props","hasError","touched","error","className","classes","children","errorMessage","Input","restProps","Textarea","createField","placeholder","name","validators","component","text","validate","getUsers","state","usersPage","users","getCurrentPage","currentPage","getTotalCount","totalCount","getPageSize","pageSize","getIsLoading","isFetching","getIsFetching","getFollowingInProgress","followingInProgress","getIsLoadingProfile","profilePage","isLoading","getPortion","portion","getEditMode","editMode","getCaptcha","auth","captcha","maxLength","max","value","length","undefined","required","email","test","module","exports","LoginForm","handleSubmit","onSubmit","htmlFor","Field","type","src","reduxForm","form","Login","isAuth","to","password","rememberMe","login","compose","connect"],"mappings":"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","file":"static/js/7.39bfc354.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './FormsControl.module.scss';\r\nimport { Field } from 'redux-form';\r\n\r\nconst FormControl = ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <div className={hasError ? classes.error : ''}>\r\n      <div>{props.children}</div>\r\n      {hasError && <span className={classes.errorMessage}>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Textarea = props => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  placeholder,\r\n  name,\r\n  validators,\r\n  component,\r\n  props = {},\r\n  text = ''\r\n) => (\r\n  <div>\r\n    <Field\r\n      placeholder={placeholder}\r\n      name={name}\r\n      validate={validators}\r\n      component={component}\r\n      {...props}\r\n    />{' '}\r\n    {text}\r\n  </div>\r\n);\r\n","export const getUsers = state => {\r\n  return state.usersPage.users;\r\n};\r\n\r\nexport const getCurrentPage = state => {\r\n  return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getTotalCount = state => {\r\n  return state.usersPage.totalCount;\r\n};\r\n\r\nexport const getPageSize = state => {\r\n  return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getIsLoading = state => {\r\n  return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getIsFetching = state => {\r\n  return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = state => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\nexport const getIsLoadingProfile = state => {\r\n  return state.profilePage.isLoading;\r\n};\r\n\r\n\r\n\r\nexport const getPortion = state => {\r\n  return state.usersPage.portion;\r\n};\r\n\r\nexport const getEditMode = state => {\r\n  return state.profilePage.editMode;\r\n};\r\n\r\nexport const getCaptcha = state => {\r\n  return state.auth.captcha;\r\n};\r\n","export const maxLength = max => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n\r\nexport const required = value => {\r\n  return value ? undefined : 'Field is required';\r\n};\r\n\r\nexport const email = value =>\r\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n    ? 'Invalid email address'\r\n    : undefined;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControl_error__3Xx8o\",\"errorMessage\":\"FormsControl_errorMessage__Jo2_I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"login_error__wvio1\"};","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, createField } from '../../Common/FormsControl';\r\nimport { required, email } from '../../utils/validators/validators';\r\nimport classes from './login.module.scss';\r\n\r\nlet LoginForm = props => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <label htmlFor=\"email\">Login</label>\r\n        <Field\r\n          name=\"email\"\r\n          component={Input}\r\n          type=\"text\"\r\n          validate={[required, email]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"password\">Password</label>\r\n        <Field\r\n          name=\"password\"\r\n          component={Input}\r\n          type=\"password\"\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"rememberMe\">Remember me</label>\r\n        <Field name=\"rememberMe\" component={Input} type=\"checkbox\" />\r\n      </div>\r\n      {props.captcha && (\r\n        <div>\r\n          <img src={props.captcha} />{' '}\r\n          {createField('Symbols from image', 'captcha', [required], Input)}\r\n        </div>\r\n      )}\r\n      <div className={classes.error}>{props.error}</div>\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nLoginForm = reduxForm({ form: 'loginForm' })(LoginForm);\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport LoginForm from './loginForm';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Login = props => {\r\n  const onSubmit = ({ email, password, rememberMe, captcha }) => {\r\n    props.login(email, password, rememberMe, captcha);\r\n  };\r\n\r\n  if (props.isAuth) return <Redirect to={'/profile'} />;\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginForm onSubmit={onSubmit} captcha={props.captcha} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { compose } from 'redux';\r\nimport Login from './login';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { getCaptcha } from '../../redux/selectors';\r\n\r\nconst mapStateToProps = state => {\r\n  return { isAuth: state.auth.isAuth, captcha: getCaptcha(state) };\r\n};\r\n\r\nexport default compose(\r\n  connect(\r\n    mapStateToProps,\r\n    { login }\r\n  )\r\n)(Login);\r\n"],"sourceRoot":""}